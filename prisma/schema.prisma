generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user_id      String
  User         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Appointment {
  appointment_id     String               @id
  purpose            String               @db.VarChar(255)
  location           String               @db.VarChar(100)
  appointment_date   DateTime             @db.DateTime(0)
  case_id            String
  Cases              Cases                @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "fk_appointment_case")
  Appointment_Client Appointment_Client[]
  Appointment_Staff  Appointment_Staff[]

  @@index([case_id], map: "fk_appointment_case")
}

model Appointment_Client {
  appointment_id String
  client_id      String
  Appointment    Appointment @relation(fields: [appointment_id], references: [appointment_id], onDelete: Cascade, map: "fk_appclient_appointment")
  Client         Client      @relation(fields: [client_id], references: [client_id], onDelete: Cascade, map: "fk_appclient_client")

  @@id([appointment_id, client_id])
  @@index([client_id], map: "fk_appclient_client")
}

model Appointment_Staff {
  appointment_id String
  staff_id       String
  Appointment    Appointment @relation(fields: [appointment_id], references: [appointment_id], onDelete: Cascade, map: "fk_appstaff_appointment")
  Staff          Staff       @relation(fields: [staff_id], references: [staff_id], onDelete: Cascade, map: "fk_appstaff_staff")

  @@id([appointment_id, staff_id])
  @@index([staff_id], map: "fk_appstaff_staff")
}

model Billing {
  billing_id   String   @id
  payment_date DateTime @db.Date
  payment_mode String   @db.VarChar(50)
  due_date     DateTime @db.Date
  status       String   @db.VarChar(50)
  amount       Decimal  @db.Decimal(10, 2)
  client_id    String
  case_id      String
  Cases        Cases    @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "fk_billing_case")
  Client       Client   @relation(fields: [client_id], references: [client_id], onDelete: Cascade, map: "fk_billing_client")

  @@index([case_id], map: "fk_billing_case")
  @@index([client_id], map: "fk_billing_client")
}

model Cases {
  case_id     String        @id
  filing_date DateTime      @db.Date
  court_name  String        @db.VarChar(100)
  verdict     String?       @db.VarChar(255)
  title       String        @db.VarChar(255)
  case_type   String        @db.VarChar(50)
  status      String        @db.VarChar(50)
  Appointment Appointment[]
  Billing     Billing[]
  Client_Case Client_Case[]
  Document    Document[]
  Staff_Case  Staff_Case[]
}

model Client {
  client_id          String               @id
  name               String               @db.VarChar(100)
  address            String               @db.VarChar(255)
  phone_no           String               @db.VarChar(20)
  Appointment_Client Appointment_Client[]
  Billing            Billing[]
  client_auth        User                 @relation(fields: [client_id], references: [id], onDelete: Cascade, map: "fk_client_auth")
  Client_Case        Client_Case[]
}

model Client_Case {
  client_id String
  case_id   String
  Cases     Cases  @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "fk_clientcase_case")
  Client    Client @relation(fields: [client_id], references: [client_id], onDelete: Cascade, map: "fk_clientcase_client")

  @@id([client_id, case_id])
  @@index([case_id], map: "fk_clientcase_case")
}

model Document {
  doc_id      String   @id
  upload_date DateTime @db.DateTime(0)
  doc_type    String   @db.VarChar(50)
  case_id     String
  Cases       Cases    @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "fk_document_case")

  @@index([case_id], map: "fk_document_case")
}

model Expense {
  expense_id   String   @id
  amount       Decimal  @db.Decimal(10, 2)
  description  String   @db.VarChar(255)
  expense_date DateTime @db.Date
  paid_by      String
  Staff        Staff    @relation(fields: [paid_by], references: [staff_id], onDelete: NoAction, map: "fk_expense_staff")

  @@index([paid_by], map: "fk_expense_staff")
}

model Staff {
  staff_id          String              @id
  name              String              @db.VarChar(100)
  experience        Int
  phone_no          String              @db.VarChar(20)
  bar_number        String?             @db.VarChar(50)
  address           String              @db.VarChar(255)
  specialisation    String?             @db.VarChar(100)
  s_role            String              @db.VarChar(50)
  designation       String?             @db.VarChar(50)
  image             String?             @db.VarChar(512)
  Appointment_Staff Appointment_Staff[]
  Expense           Expense[]
  staff_auth        User                @relation(fields: [staff_id], references: [id], onDelete: Cascade, map: "fk_staffauth_staff")
  Staff_Case        Staff_Case[]
}

model Staff_Case {
  staff_id String
  case_id  String
  Cases    Cases  @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "fk_staffcase_case")
  Staff    Staff  @relation(fields: [staff_id], references: [staff_id], onDelete: Cascade, map: "fk_staffcase_staff")

  @@id([staff_id, case_id])
  @@index([case_id], map: "fk_staffcase_case")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique(map: "email")
  email_verified DateTime?
  hashedPassword String?
  image          String?
  role           User_role
  Client         Client?
  Staff          Staff?
  sessions       Session[]
}

enum User_role {
  CLIENT
  STAFF
  ADMIN
}
